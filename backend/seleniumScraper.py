#import timefrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.wait import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.action_chains import ActionChainsimport jsondef launchAndLogin(browser, user, pswd, portfolio):    """    Parameters    ----------    browser : webdriver    user : yahoo email    pswd : yahoo password    porfolio : name of portfolio    Returns 0 on success, crashes on failure    -------    Uses selenium to control firefox driver and log into yahoo finance    """    browser.get("https://finance.yahoo.com/")        print("----------")    try:        signInButton = WebDriverWait(browser, 1000).until(            EC.presence_of_element_located((By.ID, "header-signin-link"))            )        signInButton.click()        print("button clicked!")    except:        # attempt to close popup        print("attempting to close pop up")        element = browser.find_element(By.XPATH, "//div[@class='lightbox-wrapper Ta(c) Pos(f) T(0) Start(0) H(100%) W(100%) Bgc(backgroundOverlay) Z(50) Op(1)']")        browser.execute_script("arguments[0].style.visibility='hidden'", element)        signInButton = WebDriverWait(browser, 1000).until(            EC.presence_of_element_located((By.ID, "header-signin-link"))            )        signInButton.click()    # should prompt for password ?            # hard code for testing purposes        # uncheck stay signed in            print("----------")    #try:            persistent = browser.find_element(By.CLASS_NAME, "helper-item")    browser.execute_script("arguments[0].scrollIntoView();", persistent)    persistent.click()    print("checkbox clicked!")        # input email    email = WebDriverWait(browser, 1000).until(EC.presence_of_element_located((By.ID, "login-username")))    #email = browser.find_element(By.ID, "login-username")    browser.execute_script("arguments[0].scrollIntoView();", email)    email.send_keys(user)        # click next    nextButton = browser.find_element(By.ID, "login-signin")    browser.execute_script("arguments[0].scrollIntoView();", nextButton)    nextButton.click()        # input password    password = WebDriverWait(browser, 1000).until(EC.presence_of_element_located((By.ID, "login-passwd")))    #password = browser.find_element(By.ID, "login-passwd")    browser.execute_script("arguments[0].scrollIntoView();", password)    password.send_keys(pswd)        # click next again    nextButton = browser.find_element(By.ID, "login-signin")    browser.execute_script("arguments[0].scrollIntoView();", nextButton)    nextButton.click()        # navigate to portfolio dropdown    print("----------")    print("navigating to portfolio...")    myPortfolio = browser.find_element(By.LINK_TEXT, portfolio)    #browser.execute_script("arguments[0].scrollIntoView();", myPortfolio)    myPortfolio.click()    return 0# scrape data and place into json?def getPortfolioData(browser):    """    Parameters    ----------    browser : the webdriver    Returns list of json objects upon success, 1 on failure    -------    Scrape all tickers from portfolio    """    print("----------")    print("scraping...")        portfolioInfo = []    tickerWait = WebDriverWait(browser, 1000).until(EC.presence_of_element_located((By.XPATH, '//a[@data-test="quoteLink"]')))    tickers = browser.find_elements(By.XPATH, '//a[@data-test="quoteLink"]')        prices = browser.find_elements(By.XPATH, '//fin-streamer[@data-test="colorChange"]')    counter = 0    for i in range(len(tickers)):        symbol = tickers[i].text        price = prices[i + counter].text        change = prices[i + counter + 1].text        percentChange = prices[i + counter + 2].text        print("Ticker: " + tickers[i].text)        print("Price: " + prices[i + counter].text)        print("Change: " + prices[i + counter + 1].text)        print("Change Percent: " + prices[i + counter + 2].text)        print("Volume: " + prices[i + counter + 3].text)        print("Market Cap: " + prices[i + counter + 4].text)        stock = {            'symbol' : symbol,            'price' : price,            'change' : change,            'percentChange' : percentChange        }        counter += 4        portfolioInfo.append(stock)        return portfolioInfo